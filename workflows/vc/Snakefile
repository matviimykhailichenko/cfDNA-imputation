import pandas as pd
from pathlib import Path
import sys

snakefile_dir = Path(workflow.basedir).resolve()
repo_root = snakefile_dir.parents[1]
sys.path.insert(0, str(repo_root))

configfile: "config.yaml"

df = pd.read_csv(f"{repo_root}/doc/sample_manifest.csv")
COVERAGES = [30,25,20,15,10]
testing = config['testing']
base_dir = Path(config['cluster_base_dir'] if not testing else config['local_base_dir'])
SAMPLES = df.set_index("sample_id")["bam_path"].to_dict() if not testing else {'D1_1':'/media/matvii/30c92328-1f20-448d-a014-902558a05393/galushka/sandbox/data/D1_1_30x.bam'}
data_dir = Path(config["vc_data_dir"] if not testing else '/media/matvii/30c92328-1f20-448d-a014-902558a05393/galushka/sandbox/data')
tmp_dir = Path(config["tmp_dir"] if not testing else '/media/matvii/30c92328-1f20-448d-a014-902558a05393/galushka/sandbox/tmp')
results_dir = Path(config["results_dir"] if not testing else '/media/matvii/30c92328-1f20-448d-a014-902558a05393/galushka/sandbox/results')
known_snps = base_dir / 'resources/known_snps.vcf.gz'
known_indels = base_dir / 'resources/known_indels.vcf.gz'
reference = Path(config['reference'] if not testing else config['reference_local'])
bam_prefixes = ["RG", "bqsr", "bqsr_indelqual"]


rule all:
    input:
        expand(f"{results_dir}/{{sample}}/{{sample}}.vcf.gz", sample=SAMPLES.keys()),
        expand(f"{results_dir}/{{sample}}/{{sample}}.vcf.gz.tbi", sample=SAMPLES.keys()),
        expand(f"{results_dir}/{{sample}}/{{sample}}_{{prefix}}.cram", sample=SAMPLES.keys(), prefix=bam_prefixes),
        expand(f"{results_dir}/{{sample}}/{{sample}}_{{prefix}}.cram.crai", sample=SAMPLES.keys(), prefix=bam_prefixes)


from scripts.custom.helpers import get_highest_cov_bam
from scripts.logging_ops import notify_bot

onstart:
    notify_bot("Snakemake had started.")

onsuccess:
    notify_bot("Snakemake had finished successfully.")

onerror:
    notify_bot("Snakemake had failed.")

wildcard_constraints:
    sample="[^/]+",
    prefix="[^/]+"


rule add_read_group:
    input:
        bam=lambda wc: get_highest_cov_bam(wc,data_dir=data_dir)
    output:
        bam=temp(f'{str(tmp_dir)}/{{sample}}/{{sample}}_RG.bam'),
    threads: 1
    conda: f'{repo_root}/shared/envs/gatk.yaml'
    log: f'{str(tmp_dir)}/{{sample}}/{{sample}}_create_recal_table.log'
    shell:
        """
        set -euo pipefail
        
        mkdir -p "$(dirname {output.bam})"
        gatk AddOrReplaceReadGroups \
          -I {input.bam} \
          -O {output.bam} \
          -RGID {wildcards.sample} \
          -RGLB lib1 \
          -RGPL ILLUMINA \
          -RGPU unit1 \
          -RGSM {wildcards.sample}
        """


rule create_recal_table:
    input:
        bam=rules.add_read_group.output.bam,
        bai=f"{str(tmp_dir)}/{{sample}}/{{sample}}_RG.bam.bai",
        ref=reference,
        known_snps=known_snps,
        known_indels=known_indels
    output:
        recal_table=f"{str(tmp_dir)}/{{sample}}/{{sample}}_recal_table.csv"
    threads: 1
    conda:
        f'{repo_root}/shared/envs/gatk.yaml'
    log: f"{str(tmp_dir)}/{{sample}}/{{sample}}_create_recal_table.log"
    shell:
        """
        set -euo pipefail

        gatk BaseRecalibrator \
          -I {input.bam} \
          -R {input.ref} \
          --known-sites {input.known_snps} \
          --known-sites {input.known_indels} \
          -O {output.recal_table}
        """


rule apply_bqsr_index:
    input:
        bam=rules.add_read_group.output.bam,
        bai=f"{str(tmp_dir)}/{{sample}}/{{sample}}_RG.bam.bai",
        ref=reference,
        recal_table=rules.create_recal_table.output.recal_table
    output:
        bam=temp(f"{str(tmp_dir)}/{{sample}}/{{sample}}_bqsr.bam"),
    threads: 20
    resources: heavy=1
    conda: f'{repo_root}/shared/envs/gatk.yaml'
    log: f"{str(tmp_dir)}/{{sample}}/apply_bqsr_index.log"
    shell:
        """
        set -euo pipefail

        gatk ApplyBQSR \
            -I {input.bam} \
            -R {input.ref} \
            --bqsr-recal-file {input.recal_table} \
            -O {output.bam}
        """


rule add_indel_qual:
    input:
        bam=rules.apply_bqsr_index.output.bam,
        bai = f"{str(tmp_dir)}/{{sample}}/{{sample}}_bqsr.bam.bai",
        ref=reference
    output:
        bam=temp(f"{str(tmp_dir)}/{{sample}}/{{sample}}_bqsr_indelqual.bam"),
    threads: 20
    resources: heavy=1
    conda: f'{repo_root}/shared/envs/lofreq.yaml'
    log: f"{str(tmp_dir)}/{{sample}}/{{sample}}_indel_qual_index.log"
    shell:
        r"""
        set -euo pipefail
        
        lofreq indelqual --dindel -f {input.ref} -o {output.bam} {input.bam}
        """


rule call_variants:
    input:
        bam=rules.add_indel_qual.output.bam,
        bai=f"{str(tmp_dir)}/{{sample}}/{{sample}}_bqsr_indelqual.bam.bai",
        ref=reference
    output:
        vcf=f"{str(tmp_dir)}/{{sample}}/{{sample}}.vcf"
    threads: 20
    resources: heavy=1
    params:
        min_baseq=20,
        min_mapq=20,
        min_cov=12,
        min_qual=30
    conda: f'{repo_root}/shared/envs/lofreq.yaml'
    log: f"{str(tmp_dir)}/{{sample}}/{{sample}}_variant_calling.log"
    shell:
        r"""
        set -euo pipefail

        lofreq call-parallel \
          --pp-threads {threads} \
          -f {input.ref} \
          --call-indels \
          -m {params.min_qual} \
          -q {params.min_baseq} \
          -Q {params.min_mapq} \
          -C {params.min_cov} \
          -o {output.vcf} \
          {input.bam} 2> {log}
        """


rule compress_index:
    input:
        vcf=rules.call_variants.output.vcf
    output:
        comp_vcf=f"{str(results_dir)}/{{sample}}/{{sample}}.vcf.gz",
        tbi=f"{str(results_dir)}/{{sample}}/{{sample}}.vcf.gz.tbi"
    threads: 20
    resources: heavy=1
    conda:
        f'{repo_root}/shared/envs/htstools.yaml'
    log: f"{str(results_dir)}/{{sample}}/{{sample}}_compress_index.log"
    shell:
        r"""
        set -euo pipefail
        
        mkdir -p "$(dirname {output.comp_vcf})"
        bgzip -@ {threads} -f -c {input.vcf} > {output.comp_vcf}
        tabix -@ {threads} -f -p vcf {output.comp_vcf} 2>> {log}
        """


rule index_bam:
    input:
        bam=f"{str(tmp_dir)}/{{sample}}/{{prefix}}.bam"
    output:
        bai=f"{str(tmp_dir)}/{{sample}}/{{prefix}}.bam.bai"
    params:
        ref=reference
    threads: 20
    resources: heavy=1
    conda:
        f'{repo_root}/shared/envs/htstools.yaml'
    log: f"{str(results_dir)}/{{sample}}/{{prefix}}_archive_bams.log"
    shell:
        r"""
        samtools index -@ {threads} {input.bam} 2>> {log}
        """


rule archive_bams:
    input:
        bam=f"{str(tmp_dir)}/{{sample}}/{{sample}}_{{prefix}}.bam",
        vcf=f"{str(results_dir)}/{{sample}}/{{sample}}.vcf.gz"
    output:
        cram=f"{str(results_dir)}/{{sample}}/{{sample}}_{{prefix}}.cram",
        crai=f"{str(results_dir)}/{{sample}}/{{sample}}_{{prefix}}.cram.crai"
    params:
        ref=reference
    threads: 20
    resources: heavy=1

    log: f"{str(results_dir)}/{{sample}}/{{prefix}}_archive_bams.log"
    shell:
        r"""
        set -euo pipefail

        samtools view -@ {threads} -C -T {params.ref} -o {output.cram} {input.bam} 2>> {log}
        samtools index -@ {threads} -c {output.cram} 2>> {log}
        """